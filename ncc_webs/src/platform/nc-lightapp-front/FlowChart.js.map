{"version":3,"sources":["webpack://[name]/./src/platform/containers/FlowChart/method.js","webpack://[name]/./src/platform/containers/FlowChart/NodeRender.js","webpack://[name]/./src/platform/containers/FlowChart/Component.js"],"names":["formatBeginEndDataSequence","data","length","beginNodeObj","endNodeArr","otherData","filter","item","index","startnode","isendnode","push","Object","keys","unshift","concat","findInitSelectedIndex","originalData","initPassIndex","initNotPassIndex","isFirstNotPassRoute","isCurrentNodeIndex","isPassArr","map","ispassroute","isPass","isNotPass","find","isCurrentNodeObj","hasOwnProperty","isCurrentNode","finishedObj","isfinished","values","substring","flowFormatNode","international","initSelectedIndex","virtualName","act_name","slice","color","id","act_id","name","x","dimension","split","y","style","stroke","label","text","fontSize","tipName","billmaker","actType","act_type_value","mergeWay","merge_way","branchWay","branch_way","ismain","isstart","createEdges","edgesArr","originalFromId","fromId","sign","arguments","undefined","includes","splitFromIdBySign","from_id","Array","childItem","source","target","transition_name","actId","dragNodeChangePostion","graph","node","dx","dy","on","ev","model","getModel","update","generateInitSelected","toString","equalArray","arr1","arr2","prototype","call","JSON","stringify","renderShape","G6","shape","registerNode","getPath","Util","getRectPath","_react","__webpack_require__","_method","_NodeRender","_getMultiLang","require","track","FlowChart","props","_classCallCheck","this","_this","_possibleConstructorReturn","__proto__","getPrototypeOf","state","json","inlt","nodes","edges","selectedId","list","originalSelectedId","dagre","Component","_this2","getMultiLang","moduleId","callback","status","setState","initFlowChart","expelSelectedId","renderFlowChart","initCenterPos","shouldChangePos","console","log","nextProps","renderFlowInitData","resetChart","_this3","getSelectId","_typeof","Graph","container","height","fitView","plugins","Plugins","getTooltip","_ref","that","width","defaultIntersectBox","modes","default","edge","endArrow","readOnly","itemClickEvent","params","read","focus","zoom","scale","currId","resetChartSuccess","_this4","isNode","_toast2","content","changeNodeColor","getZoom","_toConsumableArray","forEach","_react2","createElement","className","propTypes","PropTypes","boolean","defaultProps"],"mappings":"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","file":"FlowChart.js","sourcesContent":["/**对后台返回数据二次排序，主要调整开始，结束节点位置\r\n * startnode开始节点，isendnode结束节点\r\n * **/\r\nconst formatBeginEndDataSequence = (data) => {\r\n    if(!data.length) {return []}\r\n    let beginNodeObj = {};\r\n    let endNodeArr = [];//可能有多个结束节点\r\n    let beginNodeIndex = -1;\r\n    let endNodeIndex = -1;\r\n    let otherData = data.filter( (item, index) => {\r\n        if(item.startnode) {\r\n            beginNodeObj = {...item};\r\n            beginNodeIndex = index;\r\n        }else if(item.isendnode) {\r\n            endNodeArr.push(item);\r\n            endNodeIndex = index;\r\n        }\r\n        return !item.startnode && !item.isendnode\r\n    })\r\n    Object.keys(beginNodeObj).length && otherData.unshift(beginNodeObj);\r\n\r\n    if(endNodeArr.length) {\r\n        otherData = otherData.concat(endNodeArr);\r\n    }\r\n\r\n    return otherData;\r\n}\r\n\r\n\r\n/**\r\n * 查找当前正处于的节点\r\n * isPassroute 的最后一项\r\n * **/\r\nconst findInitSelectedIndex = (originalData) => {\r\n    const data = formatBeginEndDataSequence(originalData);\r\n    if(!data.length) {return []};\r\n    let initPassIndex = -1;\r\n    let initNotPassIndex = -1;\r\n    let isFirstNotPassRoute = true;\r\n    let isCurrentNodeIndex = '';//可能有多个\r\n    const isPassArr = data.map( (item, index) => {\r\n        // 找到最后一条pass数据(多分支情况可能有某个分支未通过，但下级分支通过情况)\r\n        if(!item.ispassroute && isFirstNotPassRoute && !item.startnode && !item.isendnode) {\r\n            isFirstNotPassRoute = false;\r\n            initNotPassIndex = index;\r\n        }else if(item.ispassroute && !item.startnode && !item.isendnode) {\r\n            initPassIndex = index;\r\n        }\r\n        return item.isPass && !item.startnode && !item.isendnode\r\n    })\r\n    const isNotPass = data.find( (item, index) => {\r\n        return !item.ispassroute && !item.startnode && !item.isendnode\r\n    })\r\n\r\n    //找寻当前所处节点，如果此节点存在，则此节点为当前选中节点，且后面节点通过，但不可驳回操作\r\n    const isCurrentNodeObj = data.find( (item, index) => {\r\n        if(item.hasOwnProperty('isCurrentNode') && item.isCurrentNode) {\r\n            isCurrentNodeIndex = index + ','; \r\n        }\r\n        return item.isCurrentNode;\r\n    })\r\n\r\n    //isfinished表示该节点进去，此节点已经被走过并完成\r\n    const finishedObj = data.find( (item, index) => {\r\n        return item.isfinished\r\n    })\r\n    \r\n    if(!!finishedObj && Object.keys(finishedObj).length) {\r\n        return false;//找不到的节点坐标\r\n    }else if(isCurrentNodeObj && Object.values(isCurrentNodeObj)) {//有个节点被驳回到当前节点之前节点\r\n        return isCurrentNodeIndex.substring(0,isCurrentNodeIndex.length-1);\r\n    }else if(!isNotPass && Object.keys(isPassArr).length) {//全是已走过的流程节点\r\n        return data.length-2\r\n    }else if(!isPassArr.length || initNotPassIndex == 0) {//全是未走的流程\r\n        return false;\r\n    }\r\n    \r\n    return initPassIndex > initNotPassIndex ? initPassIndex : initNotPassIndex-1;\r\n}\r\n\r\n/**\r\n * 节点信息生成\r\n * **/\r\nconst flowFormatNode = (originalData,international) => {\r\n    const data = formatBeginEndDataSequence(originalData);\r\n    if(!data.length) {return []};\r\n    const initSelectedIndex = findInitSelectedIndex(data);\r\n    return data.map( (item, index) => {\r\n        let virtualName = item.act_name && item.act_name.length > 7 ? `${item.act_name.slice(0,7)}...` : item.act_name;\r\n        //设置当前选中的节点\r\n        let color = '#E5E5E5';\r\n        if(index == initSelectedIndex || item.isCurrentNode) {\r\n            color = '#FFDDDD';\r\n        }else if(item.ispassroute) {\r\n            color = '#A5D6FF';\r\n        }\r\n        return {\r\n            id: item.act_id ? item.act_id : item.startnode ? 'isstart' : `isend${index}`,\r\n            name: virtualName ? virtualName : item.startnode ? international['006'] : international['007'], // 006 开始  007 结束\r\n            x: item.dimension.split(';')[0],\r\n            y: item.dimension.split(';')[1],\r\n            color: color,\r\n            ispassroute: item.ispassroute,\r\n            style: {stroke: item.ispassroute ? index == initSelectedIndex ? '#FF1414' : '#0D68C3' : '#9d9d9d'},\r\n            label: {//文本图形配置\r\n                text: virtualName ? virtualName : item.startnode ? international['006'] : international['007'],\r\n                fontSize: 13\r\n            },\r\n            tipName: item.act_name ? item.act_name : item.startnode ? international['006'] : international['007'],\r\n            billmaker: item.billmaker, // 008 无\r\n            actType: item.act_type_value || international['009'], // 009 暂无\r\n            mergeWay: item.merge_way || international['009'], // 暂无\r\n            branchWay: item.branch_way || international['009'], // 暂无\r\n            ismain: item.ismain || false,\r\n            isstart: item.isstart || false,\r\n            index: index//中间有环节被驳回时使用(后面是已通过环节)\r\n        }\r\n    })\r\n}\r\n/**\r\n * 一个流程节点包含多个来源\r\n * **/\r\nconst splitFromIdBySign = (fromId, sign=',') => {\r\n    //开始节点，无fromId属性，用自己配置的'isstart'\r\n    if(!fromId) {return 'isstart'}\r\n    if(!fromId.includes(sign)) {return fromId}\r\n    return fromId.split(sign);\r\n}\r\n\r\n/**\r\n * 流程节点关系数组生成\r\n * **/\r\nconst createEdges = (originalData) => {\r\n    const data = formatBeginEndDataSequence(originalData);\r\n    if(!data.length) {return []}\r\n    let edgesArr = [];\r\n    data.map( (item, index) => {\r\n        if(index > 0) {\r\n            //拆分后的真实fromId\r\n            const originalFromId = splitFromIdBySign(item.from_id);\r\n            if(originalFromId instanceof Array) {//同一节点有多个来源\r\n                originalFromId.map((childItem) => {\r\n                    edgesArr.push({\r\n                        source: childItem,//上一节点id\r\n                        target: item.act_id,//当前节点id \r\n                        id: `${childItem}-${item.act_id}`,\r\n                        color: item.ispassroute ? '#A3F3FF' : '#D8D8D8',\r\n                        label: item.transition_name || ''\r\n                    })\r\n                })\r\n            }else {\r\n                const fromId = item.from_id || 'isstart';//上一节点id\r\n                const actId = item.act_id || `isend${index}`;//当前节点id \r\n                edgesArr.push({\r\n                    source: fromId,//上一节点id\r\n                    target: actId,//当前节点id \r\n                    id: `${fromId}-${actId}`,\r\n                    color: item.ispassroute ? '#A3F3FF' : '#D8D8D8',\r\n                    label: item.transition_name || ''\r\n                })\r\n            }\r\n        }\r\n    })\r\n    return edgesArr;\r\n}\r\n\r\n/**\r\n * 节点简单拖拽位置变化\r\n * **/\r\nconst dragNodeChangePostion = (graph) => {\r\n    let node;\r\n    let dx;\r\n    let dy;\r\n\r\n    graph.on('node:dragstart', ev=>{\r\n      const {item} = ev;\r\n      const model = item.getModel();\r\n      node = item;\r\n      dx = model.x - ev.x;\r\n      dy = model.y - ev.y;\r\n    });\r\n    graph.on('node:drag', ev=>{\r\n      node && graph.update(node, {\r\n        x: ev.x+dx,\r\n        y: ev.y+dy\r\n      });\r\n    });\r\n    graph.on('node:dragend', ev=>{\r\n      node = undefined;\r\n    });\r\n}\r\n\r\n/**\r\n * 生成初始化的当前所属节点\r\n * **/\r\nconst generateInitSelected = (originalData) => {\r\n    const data = formatBeginEndDataSequence(originalData);\r\n    const initSelectedIndex = findInitSelectedIndex(data);\r\n    if(!initSelectedIndex) {return ''}; \r\n    if(!data.length) {return ''};\r\n    const selectedId =  data.find( (item, index) => {\r\n        return initSelectedIndex.toString().includes(',') ? initSelectedIndex.toString().includes(index) : initSelectedIndex == index\r\n    }).act_id;\r\n\r\n    return selectedId\r\n}\r\n\r\n/**\r\n * 判断两个对象数组是否相等\r\n * **/\r\nconst equalArray = (arr1, arr2) => {\r\n    if(!arr2) return true;\r\n    if(Object.prototype.toString.call(arr1).slice(8, -1) !== 'Array' || Object.prototype.toString.call(arr2).slice(8, -1) !== 'Array') return false; \r\n    return JSON.stringify(arr1) === JSON.stringify(arr2)\r\n}\r\n\r\nexport {\r\n    flowFormatNode,\r\n    createEdges,\r\n    dragNodeChangePostion,\r\n    generateInitSelected,\r\n    equalArray\r\n}","const renderShape = (G6,shape) => {\r\n    if(shape === 'react') {\r\n        return G6.registerNode('rect', {\r\n            getPath: function getPath(item) {\r\n              var width = 90; // 一半宽\r\n              var height = 30; // 一半高\r\n              return G6.Util.getRectPath(-width / 2, -height / 2, width, height, 6);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport {\r\n    renderShape,\r\n}\r\n","import React, { Component, Fragment } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport G6 from '@antv/g6';\r\nimport ajax from '../../api/ajax';\r\nimport toast from '../../api/toast';\r\nimport PropTypes from 'prop-types';\r\nimport { flowFormatNode, createEdges, dragNodeChangePostion, generateInitSelected, equalArray } from './method';\r\nimport { renderShape } from './NodeRender';\r\nimport { getMultiLang } from '../../api/getMultiLang';\r\n\r\nconst G6Plugins = require('@antv/g6/build/plugins');\r\n\r\n// 关闭 G6 的体验改进计划打点请求\r\nG6.track(false);\r\n\r\nclass FlowChart extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tjson: {},\r\n\t\t\tinlt: null,\r\n\t\t\tdata: {\r\n\t\t\t\tnodes: [],\r\n\t\t\t\tedges: []\r\n\t\t\t},\r\n\t\t\tselectedId: generateInitSelected(this.props.list || []), // 选中的节点id，页面初加载时选中节点为基本节点,即基于基本节点构建的上下游关系\r\n\t\t\toriginalSelectedId: generateInitSelected(this.props.list || []) //用于判断选中的节点是否是自身\r\n\t\t};\r\n\t\tthis.dagre = null;\r\n\t\tthis.graph = null;\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tlet callback = (json, status, inlt) => {\r\n\t\t\tif (status) {\r\n\t\t\t\tthis.setState(\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tjson,\r\n\t\t\t\t\t\tinlt,\r\n\t\t\t\t\t\tdata: {\r\n\t\t\t\t\t\t\tnodes: flowFormatNode(this.props.list || [], json),\r\n\t\t\t\t\t\t\tedges: createEdges(this.props.list || [])\r\n\t\t\t\t\t\t} // 节点&流程指向数据\r\n\t\t\t\t\t},\r\n\t\t\t\t\t() => {\r\n\t\t\t\t\t\tthis.initFlowChart();\r\n\t\t\t\t\t\tthis.expelSelectedId();\r\n\t\t\t\t\t\tthis.renderFlowChart(this.state.data, { initCenterPos: true, shouldChangePos: true });\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t} else {\r\n\t\t\t\tconsole.log('未加载 containers_flowchart.json 多语文件');\r\n\t\t\t}\r\n\t\t};\r\n\t\tgetMultiLang({ moduleId: 'containers_flowchart', callback });\r\n\t}\r\n\r\n\tcomponentWillReceiveProps(nextProps) {\r\n\t\tif (nextProps.list && !equalArray(nextProps.list, this.props.list)) {\r\n\t\t\tthis.renderFlowInitData(nextProps.list);\r\n\t\t}\r\n\t\tconsole.log('resetChart', nextProps.resetChart);\r\n\t\tif (nextProps.resetChart && nextProps.resetChart != this.props.resetChart) {\r\n\t\t\tthis.renderFlowChart(this.state.data, { initCenterPos: true, shouldChangePos: true });\r\n\t\t}\r\n\t}\r\n\r\n\t//格式化数据\r\n\trenderFlowInitData(list) {\r\n\t\tconst data = {\r\n\t\t\tnodes: flowFormatNode(list, this.state.json),\r\n\t\t\tedges: createEdges(list)\r\n\t\t};\r\n\t\tlet selectedId = '';\r\n\t\tif (!this.state.selectedId) {\r\n\t\t\tselectedId = generateInitSelected(list);\r\n\t\t}\r\n\t\tthis.setState(\r\n\t\t\t{\r\n\t\t\t\tdata,\r\n\t\t\t\tselectedId\r\n\t\t\t},\r\n\t\t\t() => {\r\n\t\t\t\tthis.renderFlowChart(this.state.data);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\t// componentDidMount() {\r\n\t//     this.initFlowChart();\r\n\t//     this.expelSelectedId();\r\n\t//     this.renderFlowChart(this.state.data);\r\n\t// }\r\n\r\n\t//节点选中,数据回传\r\n\texpelSelectedId() {\r\n\t\tif (this.props.getSelectId && typeof this.props.getSelectId) {\r\n\t\t\tthis.props.getSelectId(this.state.selectedId, this.state.originalSelectedId);\r\n\t\t}\r\n\t}\r\n\r\n\t// 初始化渲染并绑定节点事件\r\n\tinitFlowChart() {\r\n\t\trenderShape(G6, 'react');\r\n\t\tthis.graph = new G6.Graph({\r\n\t\t\tcontainer: 'mountNode',\r\n\t\t\theight: 205,\r\n\t\t\tfitView: 'cc',\r\n\t\t\tplugins: [\r\n\t\t\t\tnew G6.Plugins['tool.tooltip']({\r\n\t\t\t\t\t// <p>${(model.ismain && model.isstart) ? that.state.json['001'] : ''}: ${model.tipName}</p>\r\n\t\t\t\t\tgetTooltip({ item }) {\r\n\t\t\t\t\t\tconst model = item.getModel();\r\n\t\t\t\t\t\treturn `<div class=\"tips-model\">\r\n                            <p>${that.state.json['000']}: ${model.tipName || '暂无'}</p> \r\n                            <p>${that.state.json['001']}: ${model.actType || '暂无'}</p>\r\n                            <p>${that.state.json['002']}: ${model.billmaker || '暂无'}</p>\r\n                            <p>${that.state.json['003']}: ${model.mergeWay || '暂无'}</p>\r\n                            <p>${that.state.json['004']}: ${model.branchWay || '暂无'}</p>\r\n                        </div>`;\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tnew G6.Plugins['tool.minimap']({\r\n\t\t\t\t\tcontainer: 'mountNode',\r\n\t\t\t\t\twidth: 180,\r\n\t\t\t\t\theight: 120\r\n\t\t\t\t})\r\n\t\t\t],\r\n\t\t\tdefaultIntersectBox: 'rect', // 使用矩形包围盒\r\n\t\t\tmodes: {\r\n\t\t\t\tdefault: [ 'panBlank', 'panNode', 'wheelZoom' ]\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t//流程线条箭头设置\r\n\t\tthis.graph.edge({\r\n\t\t\tstyle: {\r\n\t\t\t\tendArrow: true\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tconst that = this;\r\n\t\t//流程节点数据提示、形状设置\r\n\t\tthis.graph.node({\r\n\t\t\tshape: 'rect'\r\n\t\t});\r\n\t\tif (!that.props.readOnly) {\r\n\t\t\tthat.itemClickEvent();\r\n\t\t}\r\n\t}\r\n\r\n\trenderFlowChart(data, params = {}) {\r\n\t\t// this.graph.remove()\r\n\t\tthis.graph.read(data);\r\n\t\t//初始化中心节点位置\r\n\t\tif (params.hasOwnProperty('initCenterPos')) {\r\n\t\t\tif (this.state.selectedId) {\r\n\t\t\t\tthis.graph.focus(this.state.selectedId);\r\n\t\t\t} else {\r\n\t\t\t\tthis.graph.focus('isstart');\r\n\t\t\t}\r\n\t\t}\r\n\t\t//只在初始化调用一次节点位置变更事件(通过panNode模式调用)\r\n\t\tif (params.hasOwnProperty('shouldChangePos')) {\r\n\t\t\t// dragNodeChangePostion(this.graph);\r\n\t\t}\r\n\t\t//点击后维持原来缩放比\r\n\t\tif (params.hasOwnProperty('scale')) {\r\n\t\t\tthis.graph.zoom(params.scale);\r\n\t\t\tparams.hasOwnProperty('currId') && this.graph.focus(params.currId);\r\n\t\t}\r\n\r\n\t\tif (this.props.resetChartSuccess && typeof this.props.resetChartSuccess == 'function') {\r\n\t\t\tthis.props.resetChartSuccess(false);\r\n\t\t}\r\n\t}\r\n\r\n\t//节点点击事件绑定\r\n\titemClickEvent() {\r\n\t\tlet isCurrentNodeIndex = -1;\r\n\t\tthis.graph.on('click', (ev) => {\r\n\t\t\tif (!ev.item || !ev.item.isNode) return;\r\n\t\t\tif (ev.item.model.id == 'isstart' || ev.item.model.id == 'isend') return;\r\n\t\t\t//有一个环节被驳回到之前流程，不能驳回之后的环节\r\n\t\t\tif (ev.item.model.hasOwnProperty('isCurrentNode')) {\r\n\t\t\t\tisCurrentNodeIndex = ev.item.model.index;\r\n\t\t\t}\r\n\r\n\t\t\t//未过的流程不允许选择\r\n\t\t\tif (!ev.item.model.ispassroute) {\r\n\t\t\t\ttoast({ color: 'warning', content: this.state.json['005'] }); // 005 未通过的环节不能驳回，请重新选择\r\n\t\t\t\treturn;\r\n\t\t\t} else if (ev.item.model.index > isCurrentNodeIndex && isCurrentNodeIndex != -1) {\r\n\t\t\t\ttoast({ color: 'warning', content: '待张寒定' });\r\n\t\t\t}\r\n\t\t\tif (ev.item.isNode) {\r\n\t\t\t\tlet selectedId = ev.item.id;\r\n\t\t\t\tif (selectedId !== this.state.selectedId) {\r\n\t\t\t\t\tthis.setState(\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tselectedId\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t() => {\r\n\t\t\t\t\t\t\tthis.expelSelectedId();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet data = this.changeNodeColor(this.state.data, this.state.selectedId);\r\n\t\t\t\tconst scale = this.graph.getZoom();\r\n\t\t\t\tthis.setState({ data }, () => {\r\n\t\t\t\t\tthis.renderFlowChart(data, { scale, currId: ev.item.model.id });\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t//改变节点选中颜色\r\n\tchangeNodeColor(data, selectedId) {\r\n\t\t[ ...data.nodes, ...data.edges ].map((item, index) => {\r\n\t\t\titem.color = null;\r\n\t\t});\r\n\t\tconst { nodes, edges } = data;\r\n\t\tif (!nodes) return;\r\n\t\tnodes.forEach((item, index) => {\r\n\t\t\tif (item) {\r\n\t\t\t\tif (item.id === selectedId) {\r\n\t\t\t\t\titem.color = '#ffDDDD';\r\n\t\t\t\t\titem.style.stroke = '#FF1414';\r\n\t\t\t\t} else if (!item.ispassroute) {\r\n\t\t\t\t\titem.color = '#E5E5E5';\r\n\t\t\t\t\titem.style.stroke = '#9d9d9d';\r\n\t\t\t\t} else if (item.ispassroute) {\r\n\t\t\t\t\titem.color = '#A5D6FF';\r\n\t\t\t\t\titem.style.stroke = '#0D68C3';\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn data;\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"flow-chart-contain\">\r\n\t\t\t\t<div id=\"mountNode\" className=\"dagre\" />\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nFlowChart.propTypes = {\r\n\treadOnly: PropTypes.boolean //水平子元素对齐方式\r\n};\r\n\r\n//指定默认值:\r\nFlowChart.defaultProps = {\r\n\treadOnly: false\r\n};\r\n\r\nexport default FlowChart;\r\n"],"sourceRoot":""}